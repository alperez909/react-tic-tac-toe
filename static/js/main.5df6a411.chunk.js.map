{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","this","squares","key","winner","calculateWinner","rows","Array","fill","cols","board","map","rowIndex","colIndex","position","line","includes","renderSquare","React","Component","Game","state","history","stepNumber","xIsNext","reverse","step","setState","slice","length","concat","status","current","isGameOver","moves","move","selectedIndex","previousSquares","isArray","square","previousSquare","hasPrevious","getSelectedIndex","col","row","Math","floor","location","desc","jumpTo","symbol","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAKA,SAASA,EAAOC,GACZ,OACI,4BACIC,UAAS,iBAAYD,EAAME,UAAY,SAAW,IAClDC,QAASH,EAAMG,SACdH,EAAMI,O,IAMbC,E,2KACWC,EAAGJ,GAAY,IAAD,OACvB,OACI,kBAACH,EAAD,CACIK,MAAOG,KAAKP,MAAMQ,QAAQF,GAC1BG,IAAKH,EACLH,QAAS,kBAAM,EAAKH,MAAMG,QAAQG,IAClCJ,UAAWA,M,+BAKb,IAAD,OAECQ,EAASC,EAAgBJ,KAAKP,MAAMQ,SACtCI,EAAOC,MAFE,GAEUC,KAAK,MACxBC,EAAOF,MAHE,GAGUC,KAAK,MAEtBE,EAAQJ,EAAKK,KAAI,SAACb,EAAOc,GAC3B,OACI,yBAAKjB,UAAU,YAAYQ,IAAKS,GAExBH,EAAKE,KAAI,SAACb,EAAOe,GACb,IAAMC,EAVb,EAU6BF,EAAWC,EAC3BjB,EAAYQ,EAASA,EAAOW,KAAKC,SAASF,GAAY,KAC5D,OAAO,EAAKG,aAAaH,EAAUlB,UAOvD,OACI,6BACKc,O,GAlCGQ,IAAMC,WAwCpBC,E,kDACF,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IACD2B,MAAQ,CACTC,QAAS,CAAC,CACNpB,QAASK,MAAM,GAAGC,KAAK,QAE3Be,WAAY,EACZC,SAAS,EACTC,SAAS,GARE,E,mDAYZC,GACHzB,KAAK0B,SAAS,CACVJ,WAAYG,EACZF,QAAUE,EAAO,IAAO,M,gCAK5BzB,KAAK0B,SAAS,CACVF,SAAUxB,KAAKoB,MAAMI,Y,kCAIjBzB,GACR,IAAMsB,EAAUrB,KAAKoB,MAAMC,QAAQM,MAAM,EAAG3B,KAAKoB,MAAME,WAAW,GAE5DrB,EADUoB,EAAQA,EAAQO,OAAO,GACf3B,QAAQ0B,QAC5BvB,EAAgBH,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKoB,MAAMG,QAAU,IAAM,IACxCvB,KAAK0B,SAAS,CACVL,QAASA,EAAQQ,OAAO,CAAC,CACrB5B,QAASA,KAEbqB,WAAYD,EAAQO,OACpBL,SAAUvB,KAAKoB,MAAMG,a,+BAInB,IAuBFO,EAvBC,OACCT,EAAUrB,KAAKoB,MAAMC,QACrBU,EAAUV,EAAQrB,KAAKoB,MAAME,YAC7BnB,EAASC,EAAgB2B,EAAQ9B,SACjC+B,GAAcD,EAAQ9B,QAAQc,SAAS,MAEvCkB,EAAQZ,EAAQX,KAAI,SAACe,EAAMS,GAC7B,IAAMC,EAwElB,SAA0BlC,EAASmC,GAC/B,IAAID,GAAiB,EACrB,GAAI7B,MAAM+B,QAAQpC,GAGd,IAFA,IAAIqC,EAAQC,EACNC,EAAclC,MAAM+B,QAAQD,IAAoBnC,EAAQ2B,SAAWQ,EAAgBR,OAChF7B,EAAI,EAAGA,EAAIE,EAAQ2B,OAAQ7B,IAIhC,GAHAuC,EAASrC,EAAQF,GACjBwC,EAAiBC,EAAcJ,EAAgBrC,GAAK,KAE/CyC,GAAeF,IAAWC,IAAqBC,GAAeF,EAAS,CACxEH,EAAgBpC,EAChB,MAKZ,OAAOoC,EAxFuBM,CAAiBhB,EAAKxB,QAASiC,EAAOb,EAAQa,EAAO,GAAGjC,QAAU,MAClFyC,EAAMP,GAAiB,EAAKA,EAAgB,EAAK,EAAI,KACrDQ,EAAMR,GAAiB,EAAIS,KAAKC,MAAMV,EAAgB,GAAK,EAAG,KAC9DW,EAAWJ,GAAOC,EAAP,WAAkBD,EAAlB,aAA0BC,EAA1B,KAAmC,KAE9CI,EAAOb,EACT,eAAiBA,GAAQY,EAAQ,YAAQA,GAAa,IACtD,mBACJ,OACI,wBAAI5C,IAAKgC,EAAMxC,UAAWwC,IAAO,EAAKd,MAAME,WAAa,SAAW,IAChE,4BAAQ1B,QAAS,kBAAK,EAAKoD,OAAOd,KAAQa,OAetD,OAXI/C,KAAKoB,MAAMI,SAASS,EAAMT,UAI1BM,EADA3B,EACS,WAAaA,EAAO8C,OACtBjB,EACE,OAEA,iBAAmBhC,KAAKoB,MAAMG,QAAU,IAAM,KAIvD,yBAAK7B,UAAU,QACf,yBAAKA,UAAU,cACX,kBAACI,EAAD,CACIG,QAAS8B,EAAQ9B,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAKmD,YAAYnD,OAGzC,yBAAKL,UAAU,aACX,6BAAMoC,GACN,6BACI,4BAAQlC,QAAS,kBAAI,EAAK4B,YAAYxB,KAAKoB,MAAMI,QAAU,YAAc,eAE7E,4BAAKS,S,GAxFFhB,IAAMC,WAsGzB,SAASd,EAAgBH,GAWrB,IAVA,IAAMkD,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFpD,EAAI,EAAGA,EAAIoD,EAAMvB,OAAQ7B,IAAK,CAAC,IAAD,cACjBoD,EAAMpD,GADW,GAC5BqD,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIrD,EAAQmD,IAAMnD,EAAQmD,KAAOnD,EAAQoD,IAAMpD,EAAQmD,KAAOnD,EAAQqD,GAClE,MAAO,CAACL,OAAQhD,EAAQmD,GAAItC,KAAMqC,EAAMpD,IAGhD,OAAO,KAtBXwD,IAASC,OACL,kBAACrC,EAAD,MACAsC,SAASC,eAAe,W","file":"static/js/main.5df6a411.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n    return (\n        <button\n            className={`square ${props.highlight ? 'active' : ''}`}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\n  \nclass Board extends React.Component {\n    renderSquare(i, highlight) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                key={i}\n                onClick={() => this.props.onClick(i)} \n                highlight={highlight}\n                />\n        );\n    }\n  \n    render() {\n        const SIZE = 3;\n        const winner = calculateWinner(this.props.squares);\n        let rows = Array(SIZE).fill(null);\n        let cols = Array(SIZE).fill(null);\n\n        const board = rows.map((value, rowIndex) => {\n            return (\n                <div className=\"board-row\" key={rowIndex}>\n                    { \n                        cols.map((value, colIndex) => {\n                            const position = SIZE*rowIndex + colIndex;\n                            const highlight = winner ? winner.line.includes(position) : null;\n                            return this.renderSquare(position, highlight)\n                        })\n                    }\n                </div>\n            );\n        });\n\n        return (\n            <div>\n                {board}\n            </div>\n        );\n    }\n}\n  \nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            reverse: false\n        };\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        })\n    }\n\n    reverse() {\n        this.setState({\n            reverse: !this.state.reverse\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber+1);\n        const current = history[history.length-1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const isGameOver = !current.squares.includes(null);\n\n        const moves = history.map((step, move) => {\n            const selectedIndex = getSelectedIndex(step.squares, move ? history[move - 1].squares : null);\n            const col = selectedIndex > -1 ? (selectedIndex % 3) + 1 : null;\n            const row = selectedIndex > -1 ? Math.floor(selectedIndex / 3) + 1: null;\n            const location = col && row ?  `(${col}, ${row})` : null;\n\n            const desc = move ? \n                'Go to move #' + move + (location ? `: ${location}` : ''):\n                'Go to game start';\n            return (\n                <li key={move} className={move===this.state.stepNumber ? 'active' : ''}>\n                    <button onClick={()=> this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n        if (this.state.reverse) moves.reverse();\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner.symbol;\n        } else if (isGameOver) {\n            status = 'Draw'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        \n        return (\n            <div className=\"game\">\n            <div className=\"game-board\">\n                <Board \n                    squares={current.squares}\n                    onClick={(i) => this.handleClick(i)}\n                />\n            </div>\n            <div className=\"game-info\">\n                <div>{status}</div>\n                <div>\n                    <button onClick={()=>this.reverse()}>{this.state.reverse ? 'Ascending' : 'Descending'}</button>\n                </div>\n                <ol>{moves}</ol>\n            </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n  \nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {symbol: squares[a], line: lines[i]};\n        }\n    }\n    return null;\n}\n\nfunction getSelectedIndex(squares, previousSquares) {\n    let selectedIndex = -1;\n    if (Array.isArray(squares)) {\n        let square, previousSquare;\n        const hasPrevious = Array.isArray(previousSquares) && squares.length === previousSquares.length;\n        for (let i = 0; i < squares.length; i++) {\n            square = squares[i];\n            previousSquare = hasPrevious ? previousSquares[i] : null;\n            \n            if ((hasPrevious && square !== previousSquare) || (!hasPrevious && square)) {\n                selectedIndex = i;\n                break;\n            }\n        }\n    }\n\n    return selectedIndex;\n}"],"sourceRoot":""}